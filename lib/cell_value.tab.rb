#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.0
# from Racc grammar file "".
#

require 'racc/parser.rb'

require 'strscan'
require_relative 'syntax_error'

module CSVPlusPlus
  class CellValueParser < Racc::Parser

module_eval(<<'...end cell_value.y/module_eval...', 'cell_value.y', 47)
  attr_accessor :ast

  def parse(text)
    return nil unless text.strip.start_with?('=')
    tokens = []

    s = StringScanner.new text
    until s.empty?
      case
      when s.scan(/\s+/)
      when s.scan(/TRUE/)
        tokens << [:TRUE, s.matched]
      when s.scan(/FALSE/)
        tokens << [:FALSE, s.matched]
      when s.scan(/"(?:[^"\\]|\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4}))*"/)
        tokens << [:STRING, s.matched]
      when s.scan(/-?[\d.]+/)
        tokens << [:NUMBER, s.matched]
      when s.scan(/\$\$/)
        tokens << [:VAR_EXPAND, s.matched]
      when s.scan(/[\$\w_]+/)
        tokens << [:ID, s.matched]
      when s.scan(/[\(\)\/\*\+\-,=&]/)
        tokens << [s.matched, s.matched]
      else
        raise SyntaxError.new("Unable to parse starting at", s.rest)
      end 
    end
    tokens << [:EOL, :EOL]

    define_singleton_method(:next_token) { tokens.shift }

    begin
      do_parse
    rescue Racc::ParseError => e
      raise SyntaxError.new("Error parsing code section", e.message, wrapped_error: e)
    end
    @ast
  end
...end cell_value.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    18,    16,    10,     5,     8,     7,     9,     6,     2,    10,
     5,     8,     7,     9,     6,    19,    10,     5,     8,     7,
     9,     6,     3,    11,    12,    13,    14,    20 ]

racc_action_check = [
    15,    13,     2,     2,     2,     2,     2,     2,     0,    13,
    13,    13,    13,    13,    13,    15,    19,    19,    19,    19,
    19,    19,     1,     3,     4,     5,     6,    17 ]

racc_action_pointer = [
    -9,    22,    -9,    23,    14,    23,    14,   nil,   nil,   nil,
   nil,   nil,   nil,    -2,   nil,    -3,   nil,    24,   nil,     5,
   nil,   nil ]

racc_action_default = [
   -13,   -13,   -13,   -13,   -13,   -10,   -13,    -6,    -7,    -8,
    -9,    22,    -1,   -13,    -5,   -13,    -3,   -12,    -2,   -13,
    -4,   -11 ]

racc_goto_table = [
     4,     1,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    17,   nil,   nil,   nil,   nil,   nil,    21 ]

racc_goto_check = [
     2,     1,     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,   nil,   nil,   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     1,    -2,   -11 ]

racc_goto_default = [
   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 20, :_reduce_1,
  4, 21, :_reduce_2,
  3, 21, :_reduce_3,
  4, 21, :_reduce_4,
  2, 21, :_reduce_5,
  1, 21, :_reduce_6,
  1, 21, :_reduce_7,
  1, 21, :_reduce_8,
  1, 21, :_reduce_9,
  1, 21, :_reduce_10,
  3, 22, :_reduce_11,
  1, 22, :_reduce_12 ]

racc_reduce_n = 13

racc_shift_n = 22

racc_token_table = {
  false => 0,
  :error => 1,
  "(" => 2,
  ")" => 3,
  "&" => 4,
  "*" => 5,
  "/" => 6,
  "+" => 7,
  "-" => 8,
  :A1 => 9,
  :EOL => 10,
  :FALSE => 11,
  :ID => 12,
  :NUMBER => 13,
  :STRING => 14,
  :TRUE => 15,
  :VAR_EXPAND => 16,
  "=" => 17,
  "," => 18 }

racc_nt_base = 19

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"(\"",
  "\")\"",
  "\"&\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "A1",
  "EOL",
  "FALSE",
  "ID",
  "NUMBER",
  "STRING",
  "TRUE",
  "VAR_EXPAND",
  "\"=\"",
  "\",\"",
  "$start",
  "cell_value",
  "exp",
  "fn_call_args" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'cell_value.y', 18)
  def _reduce_1(val, _values, result)
     @ast = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 20)
  def _reduce_2(val, _values, result)
     result = [[:fn, val[0]], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 21)
  def _reduce_3(val, _values, result)
     result = [[:fn, val[0]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 22)
  def _reduce_4(val, _values, result)
     result = [[:fn, val[0]], [val[2]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 29)
  def _reduce_5(val, _values, result)
     result = [:var, val[1]]
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 30)
  def _reduce_6(val, _values, result)
     result = [:string, val[0].gsub('"', '')]
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 31)
  def _reduce_7(val, _values, result)
     result = [:number, val[0].to_i]
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 32)
  def _reduce_8(val, _values, result)
     result = [:boolean, true]
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 33)
  def _reduce_9(val, _values, result)
     result = [:boolean, false]
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 34)
  def _reduce_10(val, _values, result)
     result = [:id, val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 36)
  def _reduce_11(val, _values, result)
     result = [val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 37)
  def _reduce_12(val, _values, result)
     result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class CellValueParser
end   # module CSVPlusPlus
