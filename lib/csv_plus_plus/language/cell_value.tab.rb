#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.2
# from Racc grammar file "".
#

require 'racc/parser.rb'

  require_relative '../lexer'
  require_relative '../language/ast_builder'

module CSVPlusPlus
  module Language
    class CellValueParser < Racc::Parser

module_eval(<<'...end cell_value.y/module_eval...', 'cell_value.y', 49)
  include ::CSVPlusPlus::Language::ASTBuilder
  include ::CSVPlusPlus::Lexer

  protected

  def anything_to_parse?(input)
    input.strip.start_with?('=')
  end

  def parse_subject
    'cell value'
  end

  def return_value
    @ast
  end

  def tokenizer
    ::CSVPlusPlus::Lexer::Tokenizer.new(
      catchall: /[\(\)\/\*\+\-,=&]/,
      ignore: /\s+/,
      tokens: [
        [/true/i, :TRUE],
        [/false/i, :FALSE],
        [/"(?:[^"\\]|\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4}))*"/, :STRING],
        [/-?[\d.]+/, :NUMBER],
        [/\$\$/, :VAR_REF],
        [/[\$\w_]+/, :ID]
      ]
    )
  end
...end cell_value.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    33,    16,    17,    20,    18,    19,    15,     7,    16,    17,
    20,    18,    19,     7,    34,    12,    13,    10,     9,    11,
     8,    12,    13,    10,     9,    11,     8,     7,    16,    17,
    20,    18,    19,     7,     2,    12,    13,    10,     9,    11,
     8,    12,    13,    10,     9,    11,     8,     7,    16,    17,
    20,     3,    14,     7,    22,    12,    13,    10,     9,    11,
     8,    12,    13,    10,     9,    11,     8,     7,    16,    17,
    20,    23,    16,     7,    31,    12,    13,    10,     9,    11,
     8,    12,    13,    10,     9,    11,     8,     7,    29,    16,
    17,    20,    18,    19,    16,    12,    13,    10,     9,    11,
     8 ]

racc_action_check = [
    30,     4,     4,     4,     4,     4,     4,     2,    32,    32,
    32,    32,    32,     7,    30,     2,     2,     2,     2,     2,
     2,     7,     7,     7,     7,     7,     7,    16,    35,    35,
    35,    35,    35,    17,     0,    16,    16,    16,    16,    16,
    16,    17,    17,    17,    17,    17,    17,    18,    26,    26,
    26,     1,     3,    19,     8,    18,    18,    18,    18,    18,
    18,    19,    19,    19,    19,    19,    19,    20,    27,    27,
    27,    13,    25,    23,    23,    20,    20,    20,    20,    20,
    20,    23,    23,    23,    23,    23,    23,    34,    21,    21,
    21,    21,    21,    21,    28,    34,    34,    34,    34,    34,
    34 ]

racc_action_pointer = [
    18,    51,     5,    52,    -3,   nil,   nil,    11,    43,   nil,
   nil,   nil,   nil,    69,   nil,   nil,    25,    31,    45,    51,
    65,    85,   nil,    71,   nil,    68,    44,    64,    90,   nil,
    -3,   nil,     4,   nil,    85,    24 ]

racc_action_default = [
   -20,   -20,   -20,   -20,   -20,    -2,    -3,   -20,   -20,    -6,
    -7,    -8,    -9,   -10,    36,    -1,   -20,   -20,   -20,   -20,
   -20,   -20,    -5,   -20,   -15,   -16,   -17,   -18,   -19,    -4,
   -20,   -12,   -14,   -11,   -20,   -13 ]

racc_goto_table = [
     4,     1,    30,   nil,   nil,    21,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    24,    25,    26,    27,    28,   nil,
   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    35 ]

racc_goto_check = [
     2,     1,     5,   nil,   nil,     2,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,     2,     2,     2,     2,   nil,
   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     1,    -2,   nil,   nil,   -21 ]

racc_goto_default = [
   nil,   nil,   nil,     5,     6,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 19, :_reduce_1,
  1, 20, :_reduce_none,
  1, 20, :_reduce_none,
  3, 20, :_reduce_4,
  2, 20, :_reduce_5,
  1, 20, :_reduce_6,
  1, 20, :_reduce_7,
  1, 20, :_reduce_8,
  1, 20, :_reduce_9,
  1, 20, :_reduce_10,
  4, 21, :_reduce_11,
  3, 21, :_reduce_12,
  3, 23, :_reduce_13,
  1, 23, :_reduce_14,
  3, 22, :_reduce_15,
  3, 22, :_reduce_16,
  3, 22, :_reduce_17,
  3, 22, :_reduce_18,
  3, 22, :_reduce_19 ]

racc_reduce_n = 20

racc_shift_n = 36

racc_token_table = {
  false => 0,
  :error => 1,
  "(" => 2,
  ")" => 3,
  "&" => 4,
  "*" => 5,
  "/" => 6,
  "+" => 7,
  "-" => 8,
  :EOL => 9,
  :FALSE => 10,
  :ID => 11,
  :NUMBER => 12,
  :STRING => 13,
  :TRUE => 14,
  :VAR_REF => 15,
  "=" => 16,
  "," => 17 }

racc_nt_base = 18

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"(\"",
  "\")\"",
  "\"&\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "EOL",
  "FALSE",
  "ID",
  "NUMBER",
  "STRING",
  "TRUE",
  "VAR_REF",
  "\"=\"",
  "\",\"",
  "$start",
  "cell_value",
  "exp",
  "fn_call",
  "infix_fn_call",
  "fn_call_args" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'cell_value.y', 17)
  def _reduce_1(val, _values, result)
     @ast = val[1]
    result
  end
.,.,

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'cell_value.y', 21)
  def _reduce_4(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 22)
  def _reduce_5(val, _values, result)
     result = variable(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 23)
  def _reduce_6(val, _values, result)
     result = string(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 24)
  def _reduce_7(val, _values, result)
     result = number(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 25)
  def _reduce_8(val, _values, result)
     result = boolean(true)
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 26)
  def _reduce_9(val, _values, result)
     result = boolean(false)
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 27)
  def _reduce_10(val, _values, result)
     result = cell_reference(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 29)
  def _reduce_11(val, _values, result)
     result = function_call(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 30)
  def _reduce_12(val, _values, result)
     result = function_call(val[0], [])
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 32)
  def _reduce_13(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 33)
  def _reduce_14(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 35)
  def _reduce_15(val, _values, result)
     result = function_call(:concat, [val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 36)
  def _reduce_16(val, _values, result)
     result = function_call(:multiply, [val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 37)
  def _reduce_17(val, _values, result)
     result = function_call(:add, [val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 38)
  def _reduce_18(val, _values, result)
     result = function_call(:minus, [val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 39)
  def _reduce_19(val, _values, result)
     result = function_call(:divide, [val[0], val[2]])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class CellValueParser
  end   # module Language
end   # module CSVPlusPlus
