#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.2
# from Racc grammar file "".
#

require 'racc/parser.rb'

require_relative '../lexer'
require_relative '../code_section'

module CSVPlusPlus
  module Language
    class CodeSectionParser < Racc::Parser

module_eval(<<'...end code_section.y/module_eval...', 'code_section.y', 67)
  include ::CSVPlusPlus::Lexer

  def initialize
    super
    @code_section = CodeSection.new
  end

  protected

  def anything_to_parse?(input)
    @rest = input.strip

    return !@rest.index(::CSVPlusPlus::Lexer::END_OF_CODE_SECTION).nil?
  end

  def parse_subject
    'code section'
  end

  def tokenizer(input)
    ::CSVPlusPlus::Lexer::Tokenizer.new(
      catchall: /[\(\)\{\}\/\*\+\-,=&]/,
      ignore: /\s+|\#[^\n]+\n/,
      input:,
      stop_fn: lambda do |scanner|
        return false unless scanner.scan(/#{::CSVPlusPlus::Lexer::END_OF_CODE_SECTION}/)

        @tokens << [:END_OF_CODE, scanner.matched]
        @rest = scanner.rest.strip
        true
      end,
      tokens: [
        [/\n/, :EOL],
        [/:=/, :ASSIGN],
        [/\bdef\b/, :FN_DEF],
        [/\bTRUE\b/i, :TRUE],
        [/\bFALSE\b/i, :FALSE],
        [/"(?:[^"\\]|\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4}))*"/, :STRING],
        [/-?[\d.]+/, :NUMBER],
        [/\$\$/, :VAR_REF],
        [/[!:\w_]+/, :ID],
      ],
    )
  end

  def return_value
    [@code_section, @rest]
  end

  private

  def e(type, *entity_args)
    ::CSVPlusPlus::Language::TYPES[type].new(*entity_args)
  end

  def def_function(id, arguments, body)
    fn_def = e(:function, id, arguments, body)
    @code_section.def_function(fn_def.id, fn_def)
  end

  def def_variable(id, ast)
    @code_section.def_variable(id, ast)
  end
...end code_section.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    45,    27,     3,    37,    51,     7,    38,    52,    28,     9,
    19,     8,    29,    30,    31,    32,    33,    24,    25,    22,
    21,    23,    20,    19,    29,    30,    31,    32,    33,    19,
    24,    25,    22,    21,    23,    20,    24,    25,    22,    21,
    23,    20,    19,    29,    30,    31,    32,    33,    19,    24,
    25,    22,    21,    23,    20,    24,    25,    22,    21,    23,
    20,    19,    29,    30,    31,    32,    33,    19,    24,    25,
    22,    21,    23,    20,    24,    25,    22,    21,    23,    20,
    19,    29,    30,    31,    32,    33,    12,    24,    25,    22,
    21,    23,    20,    19,    48,    13,    14,    15,    35,    19,
    24,    25,    22,    21,    23,    20,    24,    25,    22,    21,
    23,    20,    19,    29,    30,    31,    32,    33,    36,    24,
    25,    22,    21,    23,    20,    10,    50,   nil,     7,    29,
    30,    31,    32,    33,     8,    29,    30,    31,    32,    33,
    29,    30,    31,    32,    33,    29,    30,    31,    32,    33,
    29,    30,    31,    32,    33 ]

racc_action_check = [
    34,    15,     0,    26,    47,     0,    26,    47,    15,     1,
    13,     0,    34,    34,    34,    34,    34,    13,    13,    13,
    13,    13,    13,    19,    16,    16,    16,    16,    16,    27,
    19,    19,    19,    19,    19,    19,    27,    27,    27,    27,
    27,    27,    29,    39,    39,    39,    39,    39,    30,    29,
    29,    29,    29,    29,    29,    30,    30,    30,    30,    30,
    30,    31,    40,    40,    40,    40,    40,    32,    31,    31,
    31,    31,    31,    31,    32,    32,    32,    32,    32,    32,
    33,    41,    41,    41,    41,    41,     7,    33,    33,    33,
    33,    33,    33,    36,    36,     8,     9,    12,    20,    37,
    36,    36,    36,    36,    36,    36,    37,    37,    37,    37,
    37,    37,    52,    42,    42,    42,    42,    42,    25,    52,
    52,    52,    52,    52,    52,     2,    38,   nil,     2,    43,
    43,    43,    43,    43,     2,    44,    44,    44,    44,    44,
    46,    46,    46,    46,    46,    49,    49,    49,    49,    49,
    53,    53,    53,    53,    53 ]

racc_action_pointer = [
     0,     9,   123,   nil,   nil,   nil,   nil,    75,    89,    96,
   nil,   nil,    94,     7,   nil,    -3,     8,   nil,   nil,    20,
    87,   nil,   nil,   nil,   nil,   115,    -1,    26,   nil,    39,
    45,    58,    64,    77,    -4,   nil,    90,    96,   115,    27,
    46,    65,    97,   113,   119,   nil,   124,     0,   nil,   129,
   nil,   nil,   109,   134 ]

racc_action_default = [
   -30,   -30,   -30,    -2,    -4,    -5,    -6,   -30,   -30,   -30,
    -1,    -3,   -30,   -30,    54,   -30,   -11,   -12,   -13,   -30,
   -30,   -16,   -17,   -18,   -19,   -20,   -30,   -30,   -10,   -30,
   -30,   -30,   -30,   -30,   -30,   -15,   -30,   -30,   -30,    -8,
   -21,   -22,   -23,   -24,   -25,   -14,   -29,   -30,   -27,    -7,
    -9,   -26,   -30,   -28 ]

racc_goto_table = [
    16,     4,     1,    11,     2,    26,    34,    47,   nil,   nil,
   nil,   nil,   nil,   nil,    39,   nil,    40,    41,    42,    43,
    44,   nil,   nil,    46,    49,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    53 ]

racc_goto_check = [
     7,     3,     1,     3,     2,     6,     7,    10,   nil,   nil,
   nil,   nil,   nil,   nil,     7,   nil,     7,     7,     7,     7,
     7,   nil,   nil,     7,     7,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     7 ]

racc_goto_pointer = [
   nil,     2,     4,     1,   nil,   nil,   -10,   -13,   nil,   nil,
   -29 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,     6,   nil,   nil,    17,    18,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 22, :_reduce_none,
  1, 22, :_reduce_none,
  2, 23, :_reduce_none,
  1, 23, :_reduce_none,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none,
  6, 25, :_reduce_7,
  5, 25, :_reduce_8,
  3, 27, :_reduce_9,
  1, 27, :_reduce_10,
  3, 26, :_reduce_11,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  3, 28, :_reduce_14,
  2, 28, :_reduce_15,
  1, 28, :_reduce_16,
  1, 28, :_reduce_17,
  1, 28, :_reduce_18,
  1, 28, :_reduce_19,
  1, 28, :_reduce_20,
  3, 30, :_reduce_21,
  3, 30, :_reduce_22,
  3, 30, :_reduce_23,
  3, 30, :_reduce_24,
  3, 30, :_reduce_25,
  4, 29, :_reduce_26,
  3, 29, :_reduce_27,
  3, 31, :_reduce_28,
  1, 31, :_reduce_29 ]

racc_reduce_n = 30

racc_shift_n = 54

racc_token_table = {
  false => 0,
  :error => 1,
  :END_OF_CODE => 2,
  "(" => 3,
  ")" => 4,
  :FN_DEF => 5,
  :ASSIGN => 6,
  "," => 7,
  :CELL_REF => 8,
  :EOL => 9,
  :FALSE => 10,
  :ID => 11,
  :NUMBER => 12,
  :STRING => 13,
  :TRUE => 14,
  :VAR_REF => 15,
  "&" => 16,
  "*" => 17,
  "+" => 18,
  "-" => 19,
  "/" => 20 }

racc_nt_base = 21

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "END_OF_CODE",
  "\"(\"",
  "\")\"",
  "FN_DEF",
  "ASSIGN",
  "\",\"",
  "CELL_REF",
  "EOL",
  "FALSE",
  "ID",
  "NUMBER",
  "STRING",
  "TRUE",
  "VAR_REF",
  "\"&\"",
  "\"*\"",
  "\"+\"",
  "\"-\"",
  "\"/\"",
  "$start",
  "code_section",
  "code",
  "def",
  "fn_def",
  "var_def",
  "fn_def_args",
  "exp",
  "fn_call",
  "infix_fn_call",
  "fn_call_args" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

module_eval(<<'.,.,', 'code_section.y', 29)
  def _reduce_7(val, _values, result)
     def_function(val[1], val[3], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 30)
  def _reduce_8(val, _values, result)
     def_function(val[1], [], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 32)
  def _reduce_9(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 33)
  def _reduce_10(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 35)
  def _reduce_11(val, _values, result)
     def_variable(val[0], val[2])
    result
  end
.,.,

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'code_section.y', 39)
  def _reduce_14(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 40)
  def _reduce_15(val, _values, result)
     result = e(:variable, val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 41)
  def _reduce_16(val, _values, result)
     result = e(:string, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 42)
  def _reduce_17(val, _values, result)
     result = e(:number, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 43)
  def _reduce_18(val, _values, result)
     result = e(:boolean, true)
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 44)
  def _reduce_19(val, _values, result)
     result = e(:boolean, false)
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 45)
  def _reduce_20(val, _values, result)
     result = e(:cell_reference, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 47)
  def _reduce_21(val, _values, result)
     result = e(:function_call, :concat, [val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 48)
  def _reduce_22(val, _values, result)
     result = e(:function_call, :multiply, [val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 49)
  def _reduce_23(val, _values, result)
     result = e(:function_call, :add, [val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 50)
  def _reduce_24(val, _values, result)
     result = e(:function_call, :minus, [val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 51)
  def _reduce_25(val, _values, result)
     result = e(:function_call, :divide, [val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 53)
  def _reduce_26(val, _values, result)
     result = e(:function_call, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 54)
  def _reduce_27(val, _values, result)
     result = e(:function_call, val[0], [])
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 56)
  def _reduce_28(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 57)
  def _reduce_29(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class CodeSectionParser
  end   # module Language
end   # module CSVPlusPlus
