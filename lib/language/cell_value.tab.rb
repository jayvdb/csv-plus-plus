#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.2
# from Racc grammar file "".
#

require 'racc/parser.rb'

  require_relative '../lexer'

module CSVPlusPlus
  module Language
    class CellValueParser < Racc::Parser

module_eval(<<'...end cell_value.y/module_eval...', 'cell_value.y', 39)
  include ::CSVPlusPlus::Lexer

  attr_accessor :ast

  def entities_ns
    ::CSVPlusPlus::Language::Entities
  end

  def tokenizer(scanner)
    ::CSVPlusPlus::Lexer::Tokenizer.new(
      catchall: /[\(\)\/\*\+\-,=&]/,
      ignore: /\s+/,
      scanner:,
      tokens: [
        [/true/i, :TRUE],
        [/false/i, :FALSE],
        [/"(?:[^"\\]|\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4}))*"/, :STRING],
        [/-?[\d.]+/, :NUMBER],
        [/\$\$/, :VAR_REF],
        [/[\$\w_]+/, :ID]
      ]
    )
  end

  def anything_to_parse?(input)
    input.strip.start_with?('=')
  end

  def return_value
    @ast
  end
...end cell_value.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    18,    16,    10,     5,     8,     7,     9,     6,    10,     5,
     8,     7,     9,     6,    19,    10,     5,     8,     7,     9,
     6,     2,     3,    11,    12,    13,    14,    20 ]

racc_action_check = [
    15,    13,     2,     2,     2,     2,     2,     2,    13,    13,
    13,    13,    13,    13,    15,    19,    19,    19,    19,    19,
    19,     0,     1,     3,     4,     5,     6,    17 ]

racc_action_pointer = [
     5,    22,    -8,    23,    15,    23,    15,   nil,   nil,   nil,
   nil,   nil,   nil,    -2,   nil,    -3,   nil,    24,   nil,     5,
   nil,   nil ]

racc_action_default = [
   -13,   -13,   -13,   -13,   -13,   -10,   -13,    -6,    -7,    -8,
    -9,    22,    -1,   -13,    -5,   -13,    -3,   -12,    -2,   -13,
    -4,   -11 ]

racc_goto_table = [
     4,     1,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    17,   nil,   nil,   nil,   nil,   nil,    21 ]

racc_goto_check = [
     2,     1,     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,   nil,   nil,   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     1,    -2,   -11 ]

racc_goto_default = [
   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 19, :_reduce_1,
  4, 20, :_reduce_2,
  3, 20, :_reduce_3,
  4, 20, :_reduce_4,
  2, 20, :_reduce_5,
  1, 20, :_reduce_6,
  1, 20, :_reduce_7,
  1, 20, :_reduce_8,
  1, 20, :_reduce_9,
  1, 20, :_reduce_10,
  3, 21, :_reduce_11,
  1, 21, :_reduce_12 ]

racc_reduce_n = 13

racc_shift_n = 22

racc_token_table = {
  false => 0,
  :error => 1,
  "(" => 2,
  ")" => 3,
  "&" => 4,
  "*" => 5,
  "/" => 6,
  "+" => 7,
  "-" => 8,
  :EOL => 9,
  :FALSE => 10,
  :ID => 11,
  :NUMBER => 12,
  :STRING => 13,
  :TRUE => 14,
  :VAR_REF => 15,
  "=" => 16,
  "," => 17 }

racc_nt_base = 18

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"(\"",
  "\")\"",
  "\"&\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "EOL",
  "FALSE",
  "ID",
  "NUMBER",
  "STRING",
  "TRUE",
  "VAR_REF",
  "\"=\"",
  "\",\"",
  "$start",
  "cell_value",
  "exp",
  "fn_call_args" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'cell_value.y', 17)
  def _reduce_1(val, _values, result)
     @ast = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 19)
  def _reduce_2(val, _values, result)
     result = entities_ns::FunctionCall.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 20)
  def _reduce_3(val, _values, result)
     result = entities_ns::FunctionCall.new(val[0], [])
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 21)
  def _reduce_4(val, _values, result)
     result = entities_ns::FunctionCall.new(val[0], [val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 22)
  def _reduce_5(val, _values, result)
     result = entities_ns::Variable.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 23)
  def _reduce_6(val, _values, result)
     result = entities_ns::String.new(val[0].gsub('"', ''))
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 24)
  def _reduce_7(val, _values, result)
     result = entities_ns::Number.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 25)
  def _reduce_8(val, _values, result)
     result = entities_ns::Boolean.new(true)
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 26)
  def _reduce_9(val, _values, result)
     result = entities_ns::Boolean.new(false)
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 27)
  def _reduce_10(val, _values, result)
     result = entities_ns::CellReference.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 29)
  def _reduce_11(val, _values, result)
     result = [val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 30)
  def _reduce_12(val, _values, result)
     result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class CellValueParser
  end   # module Language
end   # module CSVPlusPlus
