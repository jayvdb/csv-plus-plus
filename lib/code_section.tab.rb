#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.0
# from Racc grammar file "".
#

require 'racc/parser.rb'

require 'strscan'
require_relative 'syntax_error'
require_relative 'code_section'

module CSVPlusPlus
  class CodeSectionParser < Racc::Parser

module_eval(<<'...end code_section.y/module_eval...', 'code_section.y', 51)
  attr_accessor :variables

  def parse(text)
    tokens = []

    s = StringScanner.new text
    until s.empty?
      case
      when s.scan(/\s+/)
      when s.scan(/\#[^\n]+\n/)
      when s.scan(/---/)
        break
      when s.scan(/\n/)
        tokens << [:EOL, s.matched]
      when s.scan(/:=/)
        tokens << [:ASSIGN, s.matched]
      when s.scan(/TRUE/)
        tokens << [:TRUE, s.matched]
      when s.scan(/FALSE/)
        tokens << [:FALSE, s.matched]
      when s.scan(/"(?:[^"\\]|\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4}))*"/)
        tokens << [:STRING, s.matched]
      when s.scan(/-?[\d.]+/)
        tokens << [:NUMBER, s.matched]
      when s.scan(/\$\$/)
        tokens << [:VAR_EXPAND, s.matched]
      when s.scan(/[\w_]+/)
        tokens << [:ID, s.matched]
      when s.scan(/[\(\)\{\}\/\*\+\-,=&]/)
        tokens << [s.matched, s.matched]
      else
        raise SyntaxError.new("Unable to parse starting at", s.rest)
      end
    end
    return CodeSection.new if tokens.empty?

    define_singleton_method(:next_token) { tokens.shift }

    @variables = {}
    begin
      do_parse
    rescue Racc::ParseError => e
      raise SyntaxError.new("Error parsing code section", e.message, wrapped_error: e)
    end
    CodeSection.new(@variables)
  end
...end code_section.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    20,     4,     3,     6,     7,    15,    16,    18,    14,     9,
    12,    11,    13,    10,     3,    21,    14,     9,    12,    11,
    13,    10,    14,     9,    12,    11,    13,    10,    22 ]

racc_action_check = [
    17,     1,     0,     3,     4,     9,    10,    15,     6,     6,
     6,     6,     6,     6,     1,    17,    15,    15,    15,    15,
    15,    15,    21,    21,    21,    21,    21,    21,    19 ]

racc_action_pointer = [
   -11,     1,   nil,    -7,     4,   nil,    -4,   nil,   nil,     3,
    -7,   nil,   nil,   nil,   nil,     4,   nil,    -3,   nil,    25,
   nil,    10,   nil,   nil ]

racc_action_default = [
   -15,   -15,    -2,   -15,   -15,    -1,   -15,    24,    -3,   -12,
   -15,    -8,    -9,   -10,   -11,   -15,    -7,   -15,    -5,   -14,
    -4,   -15,    -6,   -13 ]

racc_goto_table = [
     8,     2,     5,     1,    17,   nil,   nil,   nil,   nil,    19,
   nil,   nil,   nil,   nil,   nil,    23 ]

racc_goto_check = [
     3,     2,     2,     1,     4,   nil,   nil,   nil,   nil,     3,
   nil,   nil,   nil,   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,     3,     1,    -6,   -11 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 20, :_reduce_none,
  1, 20, :_reduce_none,
  3, 21, :_reduce_3,
  4, 22, :_reduce_4,
  3, 22, :_reduce_5,
  4, 22, :_reduce_6,
  2, 22, :_reduce_7,
  1, 22, :_reduce_8,
  1, 22, :_reduce_9,
  1, 22, :_reduce_10,
  1, 22, :_reduce_11,
  1, 22, :_reduce_12,
  3, 23, :_reduce_13,
  1, 23, :_reduce_14 ]

racc_reduce_n = 15

racc_shift_n = 24

racc_token_table = {
  false => 0,
  :error => 1,
  "(" => 2,
  ")" => 3,
  "&" => 4,
  "*" => 5,
  "/" => 6,
  "+" => 7,
  "-" => 8,
  :A1 => 9,
  :ASSIGN => 10,
  :EOL => 11,
  :FALSE => 12,
  :ID => 13,
  :NUMBER => 14,
  :STRING => 15,
  :TRUE => 16,
  :VAR_EXPAND => 17,
  "," => 18 }

racc_nt_base = 19

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"(\"",
  "\")\"",
  "\"&\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "A1",
  "ASSIGN",
  "EOL",
  "FALSE",
  "ID",
  "NUMBER",
  "STRING",
  "TRUE",
  "VAR_EXPAND",
  "\",\"",
  "$start",
  "code",
  "var",
  "exp",
  "fn_call_args" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'code_section.y', 21)
  def _reduce_3(val, _values, result)
     @variables[val[0]] = val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 23)
  def _reduce_4(val, _values, result)
     result = [[:fn, val[0]], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 24)
  def _reduce_5(val, _values, result)
     result = [[:fn, val[0]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 25)
  def _reduce_6(val, _values, result)
     result = [[:fn, val[0]], [val[2]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 32)
  def _reduce_7(val, _values, result)
     result = [:var, val[1]]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 33)
  def _reduce_8(val, _values, result)
     result = [:string, val[0].gsub('"', '')]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 34)
  def _reduce_9(val, _values, result)
     result = [:number, val[0].to_i]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 35)
  def _reduce_10(val, _values, result)
     result = [:boolean, true]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 36)
  def _reduce_11(val, _values, result)
     result = [:boolean, false]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 37)
  def _reduce_12(val, _values, result)
     result = [:id, val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 39)
  def _reduce_13(val, _values, result)
     result = [val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 40)
  def _reduce_14(val, _values, result)
     result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class CodeSectionParser
end   # module CSVPlusPlus
