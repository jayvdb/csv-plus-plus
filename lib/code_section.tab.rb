#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.0
# from Racc grammar file "".
#

require 'racc/parser.rb'

require 'strscan'
require_relative 'syntax_error'
require_relative 'code_section'

module CSVPlusPlus
  class CodeSectionParser < Racc::Parser

module_eval(<<'...end code_section.y/module_eval...', 'code_section.y', 38)
  attr_accessor :variables

  def parse(text)
    tokens = []

    s = StringScanner.new text
    until s.empty?
      case
      when s.scan(/\s+/)
      when s.scan(/\#[^\n]+\n/)
      when s.scan(/---/) 
        break
      when s.scan(/\n/)  
        tokens << [:EOL, s.matched]
      when s.scan(/:=/)  
        tokens << [:ASSIGN, s.matched]
      when s.scan(/TRUE/)
        tokens << [:TRUE, s.matched]
      when s.scan(/FALSE/) 
        tokens << [:FALSE, s.matched]
      when s.scan(/"(?:[^"\\]|\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4}))*"/)
        tokens << [:STRING, s.matched]
      when s.scan(/-?[\d.]+/)
        tokens << [:NUMBER, s.matched]
      when s.scan(/[\$\w_]+/)
        tokens << [:ID, s.matched]
      when s.scan(/[\(\)\{\}\/\*\+\-,=&]/)
        tokens << [s.matched, s.matched]
      else
        raise SyntaxError.new("Unable to parse starting at", s.peek(100))
      end 
    end
    return CodeSection.new if tokens.empty?

    define_singleton_method(:next_token) { tokens.shift }

    @variables = {}
    begin
      do_parse
    rescue Racc::ParseError => e
      raise SyntaxError.new("Error parsing code section", e.message, wrapped_error: e)
    end
    CodeSection.new(@variables)
  end
...end code_section.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    32,     4,    17,    18,     3,    10,    17,    18,    19,    20,
     3,    10,     9,    33,    13,    12,    14,    15,     9,    10,
    13,    12,    14,    15,     6,    10,     9,     7,    13,    12,
    14,    15,     9,    10,    13,    12,    14,    15,    21,    10,
     9,   nil,    13,    12,    14,    15,     9,    10,    13,    12,
    14,    15,    17,    18,     9,   nil,    13,    12,    14,    15,
    10,    29,   nil,   nil,   nil,   nil,    10,     9,   nil,    13,
    12,    14,    15,     9,   nil,    13,    12,    14,    15,    31,
    17,    18,    19,    20,    16,    17,    18,    19,    20,    16,
    17,    18,    19,    20,    16,    17,    18,    19,    20,    16 ]

racc_action_check = [
    28,     1,    26,    26,     0,     6,    23,    23,    23,    23,
     1,    10,     6,    28,     6,     6,     6,     6,    10,    16,
    10,    10,    10,    10,     3,    17,    16,     4,    16,    16,
    16,    16,    17,    18,    17,    17,    17,    17,     9,    19,
    18,   nil,    18,    18,    18,    18,    19,    20,    19,    19,
    19,    19,    27,    27,    20,   nil,    20,    20,    20,    20,
    21,    21,   nil,   nil,   nil,   nil,    33,    21,   nil,    21,
    21,    21,    21,    33,   nil,    33,    33,    33,    33,    22,
    22,    22,    22,    22,    22,     8,     8,     8,     8,     8,
    30,    30,    30,    30,    30,    34,    34,    34,    34,    34 ]

racc_action_pointer = [
    -5,     1,   nil,     9,    27,   nil,     3,   nil,    81,    36,
     9,   nil,   nil,   nil,   nil,   nil,    17,    23,    31,    37,
    45,    58,    76,     2,   nil,   nil,    -2,    48,    -3,   nil,
    86,   nil,   nil,    64,    91 ]

racc_action_default = [
   -20,   -20,    -2,   -20,   -20,    -1,   -20,    35,    -3,   -19,
   -20,   -12,   -15,   -16,   -17,   -18,   -20,   -20,   -20,   -20,
   -20,   -20,   -20,    -6,    -7,    -8,    -9,   -10,   -20,    -5,
   -14,   -11,    -4,   -20,   -13 ]

racc_goto_table = [
     8,     2,     5,     1,    22,    28,   nil,   nil,   nil,   nil,
    23,    24,    25,    26,    27,    30,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    34 ]

racc_goto_check = [
     3,     2,     2,     1,     3,     4,   nil,   nil,   nil,   nil,
     3,     3,     3,     3,     3,     3,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,     3,     1,    -6,   -16,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,    11 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 18, :_reduce_none,
  1, 18, :_reduce_none,
  3, 19, :_reduce_3,
  4, 20, :_reduce_4,
  3, 20, :_reduce_5,
  3, 20, :_reduce_6,
  3, 20, :_reduce_7,
  3, 20, :_reduce_8,
  3, 20, :_reduce_9,
  3, 20, :_reduce_10,
  3, 20, :_reduce_11,
  1, 20, :_reduce_12,
  3, 21, :_reduce_13,
  1, 21, :_reduce_14,
  1, 22, :_reduce_none,
  1, 22, :_reduce_none,
  1, 22, :_reduce_none,
  1, 22, :_reduce_none,
  1, 22, :_reduce_none ]

racc_reduce_n = 20

racc_shift_n = 35

racc_token_table = {
  false => 0,
  :error => 1,
  "(" => 2,
  ")" => 3,
  "*" => 4,
  "/" => 5,
  "+" => 6,
  "-" => 7,
  "&" => 8,
  :ID => 9,
  :EOL => 10,
  :NUMBER => 11,
  :STRING => 12,
  :TRUE => 13,
  :FALSE => 14,
  :ASSIGN => 15,
  "," => 16 }

racc_nt_base = 17

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"(\"",
  "\")\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"&\"",
  "ID",
  "EOL",
  "NUMBER",
  "STRING",
  "TRUE",
  "FALSE",
  "ASSIGN",
  "\",\"",
  "$start",
  "code",
  "var",
  "exp",
  "fn_call_args",
  "literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'code_section.y', 13)
  def _reduce_3(val, _values, result)
     @variables[val[0]] = val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 15)
  def _reduce_4(val, _values, result)
     result = [[:fn, val[0]], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 16)
  def _reduce_5(val, _values, result)
     result = [[:fn, val[0]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 17)
  def _reduce_6(val, _values, result)
     result = [[:fn, "CONCAT"], [val[0], val[2]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 18)
  def _reduce_7(val, _values, result)
     result = [[:fn, "MULTIPLY"], [val[0], val[2]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 19)
  def _reduce_8(val, _values, result)
     result = [[:fn, "DIVIDE"], [val[0], val[2]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 20)
  def _reduce_9(val, _values, result)
     result = [[:fn, "ADD"], [val[0], val[2]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 21)
  def _reduce_10(val, _values, result)
     result = [[:fn, "MINUS"], [val[0], val[2]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 22)
  def _reduce_11(val, _values, result)
     result = [:group, [val[1]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 23)
  def _reduce_12(val, _values, result)
     result = [:literal, val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 25)
  def _reduce_13(val, _values, result)
     result = [val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 26)
  def _reduce_14(val, _values, result)
     result = val[0]
    result
  end
.,.,

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class CodeSectionParser
end   # module CSVPlusPlus
